{
  "address": "CFVSincHYbETh2k7w6u1ENEkjbSLtveRCEBupKidw2VS",
  "metadata": {
    "name": "pushsolanagateway",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Push Solana Gateway - Universal Gateway for Solana"
  },
  "instructions": [
    {
      "name": "add_funds",
      "docs": [
        "@notice Legacy-compatible add funds event for offchain relayers (pushsolanalocker)"
      ],
      "discriminator": [132, 237, 76, 57, 80, 10, 179, 138],
      "accounts": [
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "user",
          "writable": true,
          "signer": true
        },
        {
          "name": "price_update"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "transaction_hash",
          "type": {
            "array": ["u8", 32]
          }
        }
      ]
    },
    {
      "name": "get_sol_price",
      "docs": [
        "@notice View function for SOL price (locker-compatible)",
        "@dev    Anyone can fetch SOL price in USD"
      ],
      "discriminator": [230, 145, 206, 175, 43, 184, 97, 110],
      "accounts": [
        {
          "name": "price_update"
        }
      ],
      "args": [],
      "returns": {
        "defined": {
          "name": "PriceData"
        }
      }
    },
    {
      "name": "init_tss",
      "discriminator": [47, 31, 100, 111, 115, 2, 22, 208],
      "accounts": [
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "tss_eth_address",
          "type": {
            "array": ["u8", 20]
          }
        },
        {
          "name": "chain_id",
          "type": "u64"
        }
      ]
    },
    {
      "name": "initialize",
      "docs": ["@notice Initialize the gateway"],
      "discriminator": [175, 175, 109, 31, 13, 152, 155, 237],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "admin",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "admin",
          "type": "pubkey"
        },
        {
          "name": "pauser",
          "type": "pubkey"
        },
        {
          "name": "tss",
          "type": "pubkey"
        },
        {
          "name": "min_cap_usd",
          "type": "u128"
        },
        {
          "name": "max_cap_usd",
          "type": "u128"
        },
        {
          "name": "pyth_price_feed",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "pause",
      "docs": ["@notice Pause the gateway"],
      "discriminator": [211, 22, 221, 251, 74, 121, 193, 47],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "pauser",
          "signer": true
        }
      ],
      "args": []
    },
    {
      "name": "remove_whitelist_token",
      "docs": ["@notice Remove token from whitelist"],
      "discriminator": [65, 182, 42, 255, 198, 163, 73, 46],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "whitelist",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [119, 104, 105, 116, 101, 108, 105, 115, 116]
              }
            ]
          }
        },
        {
          "name": "admin",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "token",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "reset_nonce",
      "discriminator": [104, 139, 110, 85, 234, 155, 132, 248],
      "accounts": [
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "authority",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "new_nonce",
          "type": "u64"
        }
      ]
    },
    {
      "name": "revert_withdraw",
      "docs": ["@notice TSS-verified revert withdraw for SOL"],
      "discriminator": [8, 232, 107, 216, 153, 25, 204, 116],
      "accounts": [
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "recipient",
          "writable": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "revert_instruction",
          "type": {
            "defined": {
              "name": "RevertInstructions"
            }
          }
        },
        {
          "name": "signature",
          "type": {
            "array": ["u8", 64]
          }
        },
        {
          "name": "recovery_id",
          "type": "u8"
        },
        {
          "name": "message_hash",
          "type": {
            "array": ["u8", 32]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        }
      ]
    },
    {
      "name": "revert_withdraw_spl_token",
      "docs": ["@notice TSS-verified revert withdraw for SPL tokens"],
      "discriminator": [172, 155, 56, 3, 92, 190, 159, 191],
      "accounts": [
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "whitelist"
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "token_vault",
          "writable": true
        },
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "recipient_token_account",
          "writable": true
        },
        {
          "name": "token_mint"
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "revert_instruction",
          "type": {
            "defined": {
              "name": "RevertInstructions"
            }
          }
        },
        {
          "name": "signature",
          "type": {
            "array": ["u8", 64]
          }
        },
        {
          "name": "recovery_id",
          "type": "u8"
        },
        {
          "name": "message_hash",
          "type": {
            "array": ["u8", 32]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        }
      ]
    },
    {
      "name": "send_funds",
      "docs": [
        "@notice Allows initiating a TX for movement of funds from source chain to Push Chain.",
        "@dev    Supports both native SOL and SPL token deposits (like ETH Gateway).",
        "For native SOL: pass Pubkey::default() as bridge_token",
        "For SPL tokens: pass token mint address as bridge_token",
        "The route emits UniversalTx event."
      ],
      "discriminator": [84, 247, 211, 40, 63, 106, 15, 59],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "token_whitelist",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [119, 104, 105, 116, 101, 108, 105, 115, 116]
              }
            ]
          }
        },
        {
          "name": "user_token_account",
          "writable": true
        },
        {
          "name": "gateway_token_account",
          "writable": true
        },
        {
          "name": "user",
          "writable": true,
          "signer": true
        },
        {
          "name": "bridge_token"
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "recipient",
          "type": {
            "array": ["u8", 20]
          }
        },
        {
          "name": "bridge_token",
          "type": "pubkey"
        },
        {
          "name": "bridge_amount",
          "type": "u64"
        },
        {
          "name": "revert_instruction",
          "type": {
            "defined": {
              "name": "RevertInstructions"
            }
          }
        }
      ]
    },
    {
      "name": "send_tx_with_funds",
      "docs": [
        "@notice Allows initiating a TX for movement of funds and payload from source chain to Push Chain.",
        "@dev    Supports both native SOL and SPL token deposits with payload execution.",
        "The route emits UniversalTx event."
      ],
      "discriminator": [224, 179, 202, 222, 121, 238, 38, 168],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "token_whitelist",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [119, 104, 105, 116, 101, 108, 105, 115, 116]
              }
            ]
          }
        },
        {
          "name": "user_token_account",
          "writable": true
        },
        {
          "name": "gateway_token_account",
          "writable": true
        },
        {
          "name": "user",
          "writable": true,
          "signer": true
        },
        {
          "name": "price_update"
        },
        {
          "name": "bridge_token"
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "bridge_token",
          "type": "pubkey"
        },
        {
          "name": "bridge_amount",
          "type": "u64"
        },
        {
          "name": "payload",
          "type": {
            "defined": {
              "name": "UniversalPayload"
            }
          }
        },
        {
          "name": "revert_instruction",
          "type": {
            "defined": {
              "name": "RevertInstructions"
            }
          }
        },
        {
          "name": "gas_amount",
          "type": "u64"
        },
        {
          "name": "signature_data",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "send_tx_with_gas",
      "docs": [
        "@notice Allows initiating a TX for funding UEA with gas deposits from source chain.",
        "@dev    Supports only native SOL deposits for gas funding.",
        "The route emits UniversalTx event - important for Instant TX Route."
      ],
      "discriminator": [220, 10, 179, 127, 41, 153, 193, 213],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "user",
          "writable": true,
          "signer": true
        },
        {
          "name": "price_update"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "payload",
          "type": {
            "defined": {
              "name": "UniversalPayload"
            }
          }
        },
        {
          "name": "revert_instruction",
          "type": {
            "defined": {
              "name": "RevertInstructions"
            }
          }
        },
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "set_caps_usd",
      "docs": ["@notice Set USD caps"],
      "discriminator": [136, 160, 17, 54, 239, 108, 125, 129],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "admin",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "min_cap",
          "type": "u128"
        },
        {
          "name": "max_cap",
          "type": "u128"
        }
      ]
    },
    {
      "name": "set_pyth_confidence_threshold",
      "docs": ["@notice Set Pyth confidence threshold"],
      "discriminator": [213, 69, 242, 123, 122, 165, 125, 21],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "admin",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "threshold",
          "type": "u64"
        }
      ]
    },
    {
      "name": "set_pyth_price_feed",
      "docs": ["@notice Set Pyth price feed"],
      "discriminator": [202, 185, 109, 150, 255, 130, 210, 208],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "admin",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "price_feed",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "set_tss_address",
      "docs": ["@notice Set TSS address"],
      "discriminator": [158, 254, 147, 0, 154, 3, 56, 50],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "admin",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "new_tss",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "unpause",
      "docs": ["@notice Unpause the gateway"],
      "discriminator": [169, 144, 4, 38, 10, 141, 188, 255],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "pauser",
          "signer": true
        }
      ],
      "args": []
    },
    {
      "name": "update_tss",
      "discriminator": [227, 136, 3, 242, 177, 168, 10, 160],
      "accounts": [
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "authority",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "tss_eth_address",
          "type": {
            "array": ["u8", 20]
          }
        },
        {
          "name": "chain_id",
          "type": "u64"
        }
      ]
    },
    {
      "name": "whitelist_token",
      "docs": ["@notice Whitelist a token"],
      "discriminator": [6, 141, 83, 167, 31, 6, 2, 224],
      "accounts": [
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "whitelist",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [119, 104, 105, 116, 101, 108, 105, 115, 116]
              }
            ]
          }
        },
        {
          "name": "admin",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "token",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "withdraw_spl_token_tss",
      "docs": ["@notice TSS-verified withdraw of SPL tokens"],
      "discriminator": [238, 209, 47, 229, 44, 234, 138, 198],
      "accounts": [
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "whitelist"
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "token_vault",
          "writable": true
        },
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "recipient_token_account",
          "writable": true
        },
        {
          "name": "token_mint"
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "signature",
          "type": {
            "array": ["u8", 64]
          }
        },
        {
          "name": "recovery_id",
          "type": "u8"
        },
        {
          "name": "message_hash",
          "type": {
            "array": ["u8", 32]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdraw_tss",
      "docs": ["@notice TSS-verified withdraw of native SOL"],
      "discriminator": [112, 51, 93, 250, 136, 175, 118, 100],
      "accounts": [
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "vault",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [118, 97, 117, 108, 116]
              }
            ]
          }
        },
        {
          "name": "tss_pda",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [116, 115, 115]
              }
            ]
          }
        },
        {
          "name": "recipient",
          "writable": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "signature",
          "type": {
            "array": ["u8", 64]
          }
        },
        {
          "name": "recovery_id",
          "type": "u8"
        },
        {
          "name": "message_hash",
          "type": {
            "array": ["u8", 32]
          }
        },
        {
          "name": "nonce",
          "type": "u64"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "Config",
      "discriminator": [155, 12, 170, 224, 30, 250, 204, 130]
    },
    {
      "name": "PriceUpdateV2",
      "discriminator": [34, 241, 35, 99, 157, 126, 244, 205]
    },
    {
      "name": "TokenWhitelist",
      "discriminator": [105, 240, 104, 47, 95, 13, 48, 78]
    },
    {
      "name": "TssPda",
      "discriminator": [121, 138, 162, 251, 127, 95, 238, 135]
    }
  ],
  "events": [
    {
      "name": "CapsUpdated",
      "discriminator": [147, 181, 117, 249, 72, 147, 156, 255]
    },
    {
      "name": "FundsAddedEvent",
      "discriminator": [127, 31, 108, 255, 187, 19, 70, 68]
    },
    {
      "name": "TSSAddressUpdated",
      "discriminator": [157, 148, 149, 250, 42, 118, 17, 232]
    },
    {
      "name": "TokenRemovedFromWhitelist",
      "discriminator": [200, 69, 55, 209, 167, 225, 117, 11]
    },
    {
      "name": "TokenWhitelisted",
      "discriminator": [65, 3, 231, 165, 235, 116, 154, 51]
    },
    {
      "name": "UniversalTx",
      "discriminator": [108, 154, 216, 41, 181, 234, 29, 124]
    },
    {
      "name": "WithdrawFunds",
      "discriminator": [4, 77, 4, 28, 115, 6, 39, 233]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "PausedError",
      "msg": "Contract is paused"
    },
    {
      "code": 6001,
      "name": "Unauthorized",
      "msg": "Unauthorized access"
    },
    {
      "code": 6002,
      "name": "InvalidAmount",
      "msg": "Invalid amount"
    },
    {
      "code": 6003,
      "name": "InvalidRecipient",
      "msg": "Invalid recipient"
    },
    {
      "code": 6004,
      "name": "BelowMinCap",
      "msg": "Amount below minimum cap"
    },
    {
      "code": 6005,
      "name": "AboveMaxCap",
      "msg": "Amount above maximum cap"
    },
    {
      "code": 6006,
      "name": "ZeroAddress",
      "msg": "Zero address not allowed"
    },
    {
      "code": 6007,
      "name": "InvalidCapRange",
      "msg": "Invalid cap range"
    },
    {
      "code": 6008,
      "name": "InvalidPayload",
      "msg": "Invalid payload"
    },
    {
      "code": 6009,
      "name": "DeadlineExceeded",
      "msg": "Deadline exceeded"
    },
    {
      "code": 6010,
      "name": "InvalidPrice",
      "msg": "Invalid price data"
    },
    {
      "code": 6011,
      "name": "TokenAlreadyWhitelisted",
      "msg": "Token already whitelisted"
    },
    {
      "code": 6012,
      "name": "TokenNotWhitelisted",
      "msg": "Token not whitelisted"
    },
    {
      "code": 6013,
      "name": "TokenTransferFailed",
      "msg": "Token transfer failed"
    },
    {
      "code": 6014,
      "name": "InvalidTokenVault",
      "msg": "Invalid token vault"
    },
    {
      "code": 6015,
      "name": "InvalidOwner",
      "msg": "Invalid owner"
    },
    {
      "code": 6016,
      "name": "SlippageExceededOrExpired",
      "msg": "Slippage exceeded or expired"
    },
    {
      "code": 6017,
      "name": "Paused",
      "msg": "Contract is paused"
    },
    {
      "code": 6018,
      "name": "InvalidInput",
      "msg": "Invalid input"
    },
    {
      "code": 6019,
      "name": "InvalidMint",
      "msg": "Invalid mint"
    },
    {
      "code": 6020,
      "name": "InsufficientBalance",
      "msg": "Insufficient balance"
    },
    {
      "code": 6021,
      "name": "InvalidToken",
      "msg": "Invalid token"
    }
  ],
  "types": [
    {
      "name": "CapsUpdated",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "min_cap_usd",
            "type": "u128"
          },
          {
            "name": "max_cap_usd",
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "Config",
      "docs": [
        "Gateway configuration state (authorities, caps, oracle).",
        "PDA: `[b\"config\"]`. Holds USD caps (8 decimals) for gas-route deposits and oracle config."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "admin",
            "type": "pubkey"
          },
          {
            "name": "tss_address",
            "type": "pubkey"
          },
          {
            "name": "pauser",
            "type": "pubkey"
          },
          {
            "name": "min_cap_universal_tx_usd",
            "type": "u128"
          },
          {
            "name": "max_cap_universal_tx_usd",
            "type": "u128"
          },
          {
            "name": "paused",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "vault_bump",
            "type": "u8"
          },
          {
            "name": "pyth_price_feed",
            "type": "pubkey"
          },
          {
            "name": "pyth_confidence_threshold",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "FundsAddedEvent",
      "docs": [
        "Legacy event for fee-abstraction route (locker-compatible).",
        "Matches `pushsolanalocker` `FundsAddedEvent` exactly for offchain compatibility."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "user",
            "type": "pubkey"
          },
          {
            "name": "sol_amount",
            "type": "u64"
          },
          {
            "name": "usd_equivalent",
            "type": "i128"
          },
          {
            "name": "usd_exponent",
            "type": "i32"
          },
          {
            "name": "transaction_hash",
            "type": {
              "array": ["u8", 32]
            }
          }
        ]
      }
    },
    {
      "name": "PriceData",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "price",
            "type": "i64"
          },
          {
            "name": "exponent",
            "type": "i32"
          },
          {
            "name": "publish_time",
            "type": "i64"
          },
          {
            "name": "confidence",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "PriceFeedMessage",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "feed_id",
            "docs": [
              "`FeedId` but avoid the type alias because of compatibility issues with Anchor's `idl-build` feature."
            ],
            "type": {
              "array": ["u8", 32]
            }
          },
          {
            "name": "price",
            "type": "i64"
          },
          {
            "name": "conf",
            "type": "u64"
          },
          {
            "name": "exponent",
            "type": "i32"
          },
          {
            "name": "publish_time",
            "docs": ["The timestamp of this price update in seconds"],
            "type": "i64"
          },
          {
            "name": "prev_publish_time",
            "docs": [
              "The timestamp of the previous price update. This field is intended to allow users to",
              "identify the single unique price update for any moment in time:",
              "for any time t, the unique update is the one such that prev_publish_time < t <= publish_time.",
              "",
              "Note that there may not be such an update while we are migrating to the new message-sending logic,",
              "as some price updates on pythnet may not be sent to other chains (because the message-sending",
              "logic may not have triggered). We can solve this problem by making the message-sending mandatory",
              "(which we can do once publishers have migrated over).",
              "",
              "Additionally, this field may be equal to publish_time if the message is sent on a slot where",
              "where the aggregation was unsuccesful. This problem will go away once all publishers have",
              "migrated over to a recent version of pyth-agent."
            ],
            "type": "i64"
          },
          {
            "name": "ema_price",
            "type": "i64"
          },
          {
            "name": "ema_conf",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "PriceUpdateV2",
      "docs": [
        "A price update account. This account is used by the Pyth Receiver program to store a verified price update from a Pyth price feed.",
        "It contains:",
        "- `write_authority`: The write authority for this account. This authority can close this account to reclaim rent or update the account to contain a different price update.",
        "- `verification_level`: The [`VerificationLevel`] of this price update. This represents how many Wormhole guardian signatures have been verified for this price update.",
        "- `price_message`: The actual price update.",
        "- `posted_slot`: The slot at which this price update was posted."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "write_authority",
            "type": "pubkey"
          },
          {
            "name": "verification_level",
            "type": {
              "defined": {
                "name": "VerificationLevel"
              }
            }
          },
          {
            "name": "price_message",
            "type": {
              "defined": {
                "name": "PriceFeedMessage"
              }
            }
          },
          {
            "name": "posted_slot",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "RevertInstructions",
      "docs": [
        "Revert instructions for failed transactions (parity with EVM `RevertInstructions`)."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "fund_recipient",
            "type": "pubkey"
          },
          {
            "name": "revert_msg",
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "TSSAddressUpdated",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "old_tss",
            "type": "pubkey"
          },
          {
            "name": "new_tss",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "TokenRemovedFromWhitelist",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "token_address",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "TokenWhitelist",
      "docs": [
        "SPL token whitelist state.",
        "PDA: `[b\"whitelist\"]`. Simple list of supported SPL mints."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "tokens",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "TokenWhitelisted",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "token_address",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "TssPda",
      "docs": [
        "TSS state PDA for ECDSA verification (Ethereum-style secp256k1).",
        "Stores 20-byte ETH address, chain id, and replay-protection nonce."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "tss_eth_address",
            "type": {
              "array": ["u8", 20]
            }
          },
          {
            "name": "chain_id",
            "type": "u64"
          },
          {
            "name": "nonce",
            "type": "u64"
          },
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "TxType",
      "docs": [
        "Transaction types matching the EVM Universal Gateway `TX_TYPE`.",
        "Kept 1:1 for relayer/event parity with the EVM implementation."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Gas"
          },
          {
            "name": "GasAndPayload"
          },
          {
            "name": "Funds"
          },
          {
            "name": "FundsAndPayload"
          }
        ]
      }
    },
    {
      "name": "UniversalPayload",
      "docs": [
        "Universal payload for cross-chain execution (parity with EVM `UniversalPayload`).",
        "Serialized and hashed for event parity with EVM (payload bytes/hash)."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "to",
            "type": {
              "array": ["u8", 20]
            }
          },
          {
            "name": "value",
            "type": "u64"
          },
          {
            "name": "data",
            "type": "bytes"
          },
          {
            "name": "gas_limit",
            "type": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "u64"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "u64"
          },
          {
            "name": "nonce",
            "type": "u64"
          },
          {
            "name": "deadline",
            "type": "i64"
          },
          {
            "name": "v_type",
            "type": {
              "defined": {
                "name": "VerificationType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "UniversalTx",
      "docs": [
        "Universal transaction event (parity with EVM V0 `UniversalTx`).",
        "Single event for both gas funding and funds movement."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "recipient",
            "type": {
              "array": ["u8", 20]
            }
          },
          {
            "name": "token",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "payload",
            "type": "bytes"
          },
          {
            "name": "revert_instruction",
            "type": {
              "defined": {
                "name": "RevertInstructions"
              }
            }
          },
          {
            "name": "tx_type",
            "type": {
              "defined": {
                "name": "TxType"
              }
            }
          },
          {
            "name": "signature_data",
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "VerificationLevel",
      "docs": [
        "Pyth price updates are bridged to all blockchains via Wormhole.",
        "Using the price updates on another chain requires verifying the signatures of the Wormhole guardians.",
        "The usual process is to check the signatures for two thirds of the total number of guardians, but this can be cumbersome on Solana because of the transaction size limits,",
        "so we also allow for partial verification.",
        "",
        "This enum represents how much a price update has been verified:",
        "- If `Full`, we have verified the signatures for two thirds of the current guardians.",
        "- If `Partial`, only `num_signatures` guardian signatures have been checked.",
        "",
        "# Warning",
        "Using partially verified price updates is dangerous, as it lowers the threshold of guardians that need to collude to produce a malicious price update."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Partial",
            "fields": [
              {
                "name": "num_signatures",
                "type": "u8"
              }
            ]
          },
          {
            "name": "Full"
          }
        ]
      }
    },
    {
      "name": "VerificationType",
      "docs": ["Verification types for payload execution (parity with EVM)."],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "SignedVerification"
          },
          {
            "name": "UniversalTxVerification"
          }
        ]
      }
    },
    {
      "name": "WithdrawFunds",
      "docs": ["Withdraw event (parity with EVM `WithdrawFunds`)."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "recipient",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "token",
            "type": "pubkey"
          }
        ]
      }
    }
  ]
}
